#! /usr/bin/perl

# ambiguous_opcodes

use v5.20;
use warnings;
use experimental qw<signatures>;

my @reg;
my %op =
(
  addr => sub($idxA, $idxB) { $reg[$idxA] +  $reg[$idxB]      },
  addi => sub($idxA, $valB) { $reg[$idxA] +  $valB            },
  mulr => sub($idxA, $idxB) { $reg[$idxA] *  $reg[$idxB]      },
  muli => sub($idxA, $valB) { $reg[$idxA] *  $valB            },
  banr => sub($idxA, $idxB) { $reg[$idxA] &  $reg[$idxB]      },
  bani => sub($idxA, $valB) { $reg[$idxA] &  $valB            },
  borr => sub($idxA, $idxB) { $reg[$idxA] |  $reg[$idxB]      },
  bori => sub($idxA, $valB) { $reg[$idxA] |  $valB            },
  setr => sub($idxA, $    ) { $reg[$idxA]                     },
  seti => sub($valA, $    ) { $valA                           },
  gtir => sub($valA, $idxB) { $valA       >  $reg[$idxB] || 0 },
  gtri => sub($idxA, $valB) { $reg[$idxA] >  $valB       || 0 },
  gtrr => sub($idxA, $idxB) { $reg[$idxA] >  $reg[$idxB] || 0 },
  eqir => sub($valA, $idxB) { $valA       == $reg[$idxB] || 0 },
  eqri => sub($idxA, $valB) { $reg[$idxA] == $valB       || 0 },
  eqrr => sub($idxA, $idxB) { $reg[$idxA] == $reg[$idxB] || 0 },
);

{
  local $/ = "\n\n";
  my $samples_matching_3;
  my %maybe_op_num = map { $_ => {map { $_ => 1 } 0 .. (keys %op) - 1} } keys %op;
  while (<>)
  {
    last if /^\n$/; # blank line separates samples from program
    my ($op_num, @input, $output_idx, @after, $matches);
    (@reg[0..3], $op_num, @input[0..1], $output_idx, @after) = /(-?\d+)/g;
    while (my ($op_code, $calc_sub) = each %op)
    {
      if ($calc_sub->(@input[0..1]) == $after[$output_idx])
      {
        $matches++;
      }
      else
      {
        delete $maybe_op_num{$op_code}{$op_num};
      }
    }
    $samples_matching_3++ if $matches >= 3;
  }
  say "Samples matching at least 3 opcode behaviours: $samples_matching_3";

  while (%maybe_op_num)
  {
    my @found_num;
    while (my ($code, $poss_num) = each %maybe_op_num)
    {
      next unless keys %$poss_num == 1;
      my ($num) = keys %$poss_num;
      $op{$num} = $op{$code};
      delete $maybe_op_num{$code};
      push @found_num, $num;
    }
    delete @{$_}{@found_num} foreach values %maybe_op_num;
  }
}
