#! /usr/bin/perl

# battle_score

use utf8;
use v5.14;
use warnings;
use experimental qw<signatures>;

$/ = undef;
my $input = <>;
my $map_width = 1 + index $input, "\n";
my @map = split //, $input;
my @unit;
push @unit, {type => $1, pos => $-[1]} while $input =~ /([EG])/g;

foreach (@unit)
{
  my $next_pos = nearest_target($_->{type} eq 'E' ? 'G' : 'E', \@map, $map_width, {pos => $_->{pos}});
  say "$_->{type}($_->{pos}) -> $map[$next_pos]($next_pos)";
  # move before checking next one
}
# sort for next time

sub nearest_target($target_type, $map, $map_width, $from)
{ 
  my @queue = ($from);
  my %tried = ($from->{pos} => 1);
  while (my $here = shift @queue)
  {
    foreach my $Δ (-$map_width, -1, +1, +$map_width)
    {
      my %try_next = %$here;
      my $thing = $map->[$try_next{pos} += $Δ];
      $try_next{first_step} //= $try_next{pos};
      return $try_next{first_step} if $thing eq $target_type;
      push @queue, \%try_next if $thing eq '.' && !$tried{$try_next{pos}}++;
    }
  }
}
